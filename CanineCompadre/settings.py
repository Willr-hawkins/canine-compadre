"""
Django settings for CanineCompadre project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY' ,'django-insecure-&&+-7s@bc$kngd$1r0^cgtcc(ux*)#893b*&yv9@1_0(cx+ygl')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'
# DEBUG = True

ALLOWED_HOSTS = [
    'caninecompadre.onrender.com',
    'caninecompadre.co.uk',
    'www.caninecompadre.co.uk',
    '8000-willrhawkin-caninecompa-qq2mvid0b8j.ws-eu121.gitpod.io',
    'localhost',
    '127.0.0.1'
]

# Trusted origins
CSRF_TRUSTED_ORIGINS = [
    'https://8000-willrhawkin-caninecompa-qq2mvid0b8j.ws-eu121.gitpod.io',
    'https://caninecompadre.onrender.com/',
    'https://caninecompadre.co.uk',
    'https://www.caninecompadre.co.uk',
]

# CSRF settings for better Safari compatibility
CSRF_COOKIE_SECURE = True if not DEBUG else False
CSRF_COOKIE_HTTPONLY = False  # Allow JavaScript access
CSRF_COOKIE_SAMESITE = 'Lax'  # Less restrictive than 'Strict'
CSRF_COOKIE_NAME = 'csrftoken'  # Make sure this is explicit

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'anymail',

    # Project Apps
    'home',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # Needed for static files
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'CanineCompadre.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'CanineCompadre.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': dj_database_url.config(
        default = os.environ.get('DATABASE_URL', 'sqlite:///db.sqlite3'),
        conn_max_age = 600,
        conn_health_checks = True,
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
# Static files configuration for production
if not DEBUG:
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'
else:
    STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'

STATICFILES_DIRS = [
    BASE_DIR / "static"
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ===========================================
# GOOGLE CALENDAR INTEGRATION SETTINGS
# ===========================================

# Google Calendar ID (usually your business email or 'primary')
GOOGLE_CALENDAR_ID = os.environ.get('GOOGLE_CALENDAR_ID', 'cb25939fb6bf4aaa86f3828b7b4cef3219bd64ac274d4431b95643bc22e6408b@group.calendar.google.com')

# For development - put your JSON file in the project root as 'google_credentials.json'
# For production - use environment variable with JSON content as string
GOOGLE_SERVICE_ACCOUNT_KEY = os.environ.get('GOOGLE_SERVICE_ACCOUNT_KEY')

# ===========================================
# BUSINESS EMAIL AND CONTACT SETTINGS
# ===========================================

# Business contact information
BUSINESS_EMAIL = 'booking@caninecompadre.co.uk'
BUSINESS_PHONE = ''  # Replace with Alex's actual phone number
ADMIN_EMAIL = 'alex@caninecompadre.co.uk'  # Replace with Alex's actual email
SITE_URL = 'https://caninecompadre.co.uk' if not DEBUG else 'http://localhost:8000'

# ===========================================
# EMAIL CONFIGURATION
# ===========================================

# Default email settings
DEFAULT_FROM_EMAIL = BUSINESS_EMAIL
SERVER_EMAIL = BUSINESS_EMAIL

# Email backend configuration
if DEBUG:
    # For development - prints emails to console
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
else:
    # Production - SendGrid via AnyMail API
    EMAIL_BACKEND = 'anymail.backends.sendgrid.EmailBackend'

    ANYMAIL = {
        "SENDGRID_API_KEY": os.environ.get("SENDGRID_API_KEY"),
    }
    EMAIL_HOST = 'smtp.sendgrid.net'
    EMAIL_HOST_USER = 'apikey'  # literally 'apikey'
    EMAIL_HOST_PASSWORD = os.environ.get("SENDGRID_API_KEY")
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True
    EMAIL_TIMEOUT = 30

# ===========================================
# LOGGING CONFIGURATION
# ===========================================

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'bookings.log'),
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'home': {  # Changed from 'bookings' to 'home' since your app is called 'home'
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'home.calendar_service': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        'home.email_service': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}